
import os
from PIL import Image 

# 0111-0000 <- x mask
# 0000-1111 <- y mask
# 0000-0000 <- byte capacity
def pack_coords(x:int, y:int) -> int:
    # x is compressed to 3 bits (max: 8)
    # y is compressed to 4 bits (max: 16)
    assert(y <= 0b1111)
    assert(x <=  0b111)
    return ((x&0b111) << 4) | (y&0b1111)

def filename(file:str) -> str:
    output = os.path.basename(file).removesuffix(".png").replace('_', '')
    return output # nevermind # file[-5] # get the 4th last character of the file path, these file names will only ever be 1 character long

def varname(file:str) -> str:
    output:str = os.path.basename(file).removesuffix(".png")
    if output.isdigit(): output = '_' + output
    return output # nevermind # file[-5] # get the 4th last character of the file path, these file names will only ever be 1 character long

def run():
    # get conversion directory
    images = []

    script_dir = os.path.dirname(__file__) + "\\imgs" #<-- absolute dir the script is in
    for file in os.listdir(script_dir):
        if file.endswith(".png"):
            images.append(script_dir + "\\" + file)

    with open('declarations.rs', 'w') as f:
        
        f.write('// autogenerated by "img_convert\\convert.py"\n')
        for file in images:
            f.write(f'const {varname(file)}: &[u32] = &[')
            img = Image.open(file)
            for x in range(img.width):
                for y in range (img.height):
                    vart = img.getpixel((x,y))
                    if vart > 0.5:
                        f.write(str(pack_coords(x,y)) + ",")

            f.write('];\n')
        # add our extra null guy in
        f.write('const NULL: &[u32] = &[];\n')
        f.write("pub const fn get_char_data(char:char) -> &'static[u32]{\n\tmatch char {\n")
        # loop through entries here
        for file in images:
            f.write(f"\t'{filename(file)}' => return {varname(file)},\n")


        f.write("\t_ => return NULL}\n}")

        # assort all that data into switch statement

    # iterate through character images
    # build into a list

    # write out the list into rust code
    # switch statement??



    pass






run() # run script